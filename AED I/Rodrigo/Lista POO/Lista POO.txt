1.
# include <iostream>
using namespace std;
# include <stdio.h>

class Data{
    private:
		// Declaração de variáveis na classe
		int dia, mes, ano;
	public:
		// Função construtora
		Data() {
			dia = 1;
			mes = 1;
			ano = 2000;
		}
		// Função destrutora/destruidora
		~Data() {
            // free - malloc/calloc
            // delete - new
			cout << "Finalizando objeto Data." << endl << dia << "/" << mes << "/" << ano << endl;
		}
		// Setters
		void setDia(int d) {
			if((d < 32) && (d > 0))
				dia = d;
		}
		void setMes(int m) {
			if((m < 13) && (m > 1))
				mes = m;
		}
		void setAno(int a) {
			if(a > 0)
				ano = a;
		}
		// Getters
		int getDia() {
			return dia;
		}
		int getMes() {
			return mes; 	
		}
		int getAno() {
			return ano;
		}
		//Impressão da data
		void imprimeData()
		{
			cout << dia << "/" << mes << "/" << ano << endl;
		}
};

class Paciente {
    private:
        char nome[25];
        int peso, altura;
    public:
        Data nascimento;

        void setNome(char *name){
            strcpy(nome, name);
        }
        char * getNome(){
            return nome;
        }

        void setPeso(int p){
            peso = p;
        }
        int getPeso(){
            return peso;
        }

        void setAltura(char a){
            altura = a;
        }
        int getAltura(){
            return altura;
        }

        void print(){
            cout << nome << peso << altura;
            nascimento.imprimeData();
        }

        int idade(){
            int idade = 2020 - nascimento.getAno();
            return idade;
        }

        float imc(){
            float imc = (float) peso / (altura * altura);
            return imc;
        }

        void situacao(){
            if (this->imc() < 20){
                cout << "Abaixo do peso ideal.";
            }
            else if(this->imc() > 25){
                cout << "Acima do peso ideal.";
            }
            else{
                cout << "Dentro do peso ideal.";
            }
        }
};

2.
# include <iostream>
using namespace std;
# include <string.h>

class Data{
    private:
		// Declaração de variáveis na classe
		int dia, mes, ano;
	public:
		// Função construtora
		Data() {
			dia = 1;
			mes = 1;
			ano = 2000;
		}
		// Função destrutora/destruidora
		~Data() {
            // free - malloc/calloc
            // delete - new
			cout << "Finalizando objeto Data." << endl << dia << "/" << mes << "/" << ano << endl;
		}
		// Setters
		void setDia(int d) {
			if((d < 32) && (d > 0))
				dia = d;
		}
		void setMes(int m) {
			if((m < 13) && (m > 1))
				mes = m;
		}
		void setAno(int a) {
			if(a > 0)
				ano = a;
		}
		// Getters
		int getDia() {
			return dia;
		}
		int getMes() {
			return mes; 	
		}
		int getAno() {
			return ano;
		}
		//Impressão da data
		void imprimeData()
		{
			cout << dia << "/" << mes << "/" << ano << endl;
		}
};

class Jogador{
	private:
    	int altura, peso;
	public:
    	Data nascimento;
		char nome[25], posicao[15], nacionalidade[15];

		void setAltura(int altura){
			this->altura = altura;
		}

		void setPeso(int peso){
			this->peso = peso;
		}

		int getAltura(){
			return altura;
		}

		int getPeso() {
			return peso;
		}

		void print(){
            cout << nome << peso << altura << posicao << nacionalidade;
            nascimento.imprimeData();
        }

		int idade(){
            int idade = 2020 - nascimento.getAno();
            return idade;
        }

		int aposentar(){
			if (!strcmp(nacionalidade, "Defesa")){
				cout << "Faltam" << 40 - idade() << "Anos para o jogador se aposentar.";
			}
			if (!strcmp(nacionalidade, "Meio-campo")){
				cout << "Faltam" << 38 - idade() << "Anos para o jogador se aposentar.";
			}
			if (!strcmp(nacionalidade, "atacantes")){
				cout << "Faltam" << 35 - idade() << "Anos para o jogador se aposentar.";
			}
		}
			
};

3.
# include <iostream>
using namespace std;

class Elevador{
    private:
        int andarAtual, totalAndares, capacidade, pessoas;
    public:
        void setAndar(int andar){
			this->andarAtual = andar;
		}

		int getAndar(){
			return andarAtual;
		}

        void setTotalAndares(int TotalAndares){
			this->totalAndares = TotalAndares;
		}

		int getTotalAndares(){
			return totalAndares;
		}

        void setCapacidade(int TotalAndares){
			this->totalAndares = TotalAndares;
		}

		int getCapacidade(){
			return capacidade;
		}

        void setPessoas(int pessoas){
			this->pessoas = pessoas;
		}

		int getPessoas(){
			return pessoas;
		}

        void inicializa(int capacidade, int total){
            setCapacidade(capacidade), setTotalAndares(total);
        }

        void entra(){
            if (pessoas < capacidade){
                pessoas++;
            }
        }

        void sai(){
            if(pessoas > 0){
                pessoas--;
            }
        }

        void sobe(){
            if(andarAtual < totalAndares - 1){
                andarAtual++;
            }
        }

        void desce(){
            if(andarAtual > 0){
                andarAtual--;
            }
        }

        void print(){
            cout << "Andar atual: " << andarAtual << " Pessoas dentro: " << pessoas;
        }
};  

4.
a. Na classe base, o metodo retorna exatamente o que
foi descrito dentro da classe. Na classe derivada, que é
filha de base, os métodos que eram virtuais na classe base
foram sobrescritos pelos metodos da derivada.

b. Um erro foi gerado.

c. Não.

d. Criar um metódo não virtual de nome C que não recebe
parametros.

5.
# include <iostream>
using namespace std;

class Func{
    private:
        double salarioBruto;
        static int qtde;
    public:
        int matricula;
        char nome[15];

        Func(){
            qtde++;
        }

        void setSalarioBruto(int sb){
            if(sb > 1045 && sb < 35000){
                salarioBruto = sb;
            }
        }

        int getSalarioBruto(){
            return salarioBruto;
        }

        int quantidade(){
            return qtde;
        }

        double liquido(){
            return salarioBruto * 0.92;
        }

        void dadosFunc(){
            cout << nome << matricula << salarioBruto << liquido();
        }
};

int Func::qtde = 0;